export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
};

export type RootMutation = {
  __typename?: 'RootMutation';
  createTodo?: Maybe<TodoType>;
  createUser?: Maybe<UserType>;
  deleteTodo?: Maybe<Scalars['Boolean']['output']>;
  updateTodo?: Maybe<TodoType>;
};


export type RootMutationCreateTodoArgs = {
  input: TodoInputType;
};


export type RootMutationCreateUserArgs = {
  firstName?: InputMaybe<Scalars['String']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  password?: InputMaybe<Scalars['String']['input']>;
};


export type RootMutationDeleteTodoArgs = {
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type RootMutationUpdateTodoArgs = {
  input: UpdateInput;
};

export type RootQueryType = {
  __typename?: 'RootQueryType';
  getTodo?: Maybe<TodoType>;
  getTodos?: Maybe<Array<Maybe<TodoType>>>;
  getUser?: Maybe<UserType>;
  signIn?: Maybe<Scalars['String']['output']>;
};


export type RootQueryTypeGetTodoArgs = {
  UserId: Scalars['Int']['input'];
  id: Scalars['Int']['input'];
};


export type RootQueryTypeGetUserArgs = {
  id: Scalars['Int']['input'];
};


export type RootQueryTypeSignInArgs = {
  firstName?: InputMaybe<Scalars['String']['input']>;
  password?: InputMaybe<Scalars['String']['input']>;
};

export type TodoInputType = {
  completed?: InputMaybe<Scalars['Boolean']['input']>;
  description: Scalars['String']['input'];
  id?: InputMaybe<Scalars['ID']['input']>;
  title: Scalars['String']['input'];
};

export type TodoType = {
  __typename?: 'TodoType';
  UserId?: Maybe<Scalars['ID']['output']>;
  completed?: Maybe<Scalars['Boolean']['output']>;
  description: Scalars['String']['output'];
  id?: Maybe<Scalars['String']['output']>;
  title: Scalars['String']['output'];
};

export type UserType = {
  __typename?: 'UserType';
  firstName?: Maybe<Scalars['String']['output']>;
  lastName?: Maybe<Scalars['String']['output']>;
  password?: Maybe<Scalars['String']['output']>;
};

export type UpdateInput = {
  completed?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type TodoFragmentFragment = { __typename?: 'TodoType', id?: string | null, title: string, description: string, completed?: boolean | null, UserId?: string | null };

export type UserFragmentFragment = { __typename?: 'UserType', firstName?: string | null, lastName?: string | null, password?: string | null };

export type CreateTodoMutationVariables = Exact<{
  input: TodoInputType;
}>;


export type CreateTodoMutation = { __typename?: 'RootMutation', createTodo?: { __typename?: 'TodoType', id?: string | null, title: string, description: string, completed?: boolean | null, UserId?: string | null } | null };

export type DeleteTodoMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type DeleteTodoMutation = { __typename?: 'RootMutation', deleteTodo?: boolean | null };

export type UpdateTodoMutationVariables = Exact<{
  input: UpdateInput;
}>;


export type UpdateTodoMutation = { __typename?: 'RootMutation', updateTodo?: { __typename?: 'TodoType', id?: string | null, title: string, description: string, completed?: boolean | null, UserId?: string | null } | null };

export type CreateUserMutationVariables = Exact<{
  firstName: Scalars['String']['input'];
  lastName: Scalars['String']['input'];
  password: Scalars['String']['input'];
}>;


export type CreateUserMutation = { __typename?: 'RootMutation', createUser?: { __typename?: 'UserType', firstName?: string | null, lastName?: string | null, password?: string | null } | null };

export type GetTodosQueryVariables = Exact<{ [key: string]: never; }>;


export type GetTodosQuery = { __typename?: 'RootQueryType', getTodos?: Array<{ __typename?: 'TodoType', id?: string | null, title: string, description: string, completed?: boolean | null, UserId?: string | null } | null> | null };

export type SignInQueryVariables = Exact<{
  firstName: Scalars['String']['input'];
  password: Scalars['String']['input'];
}>;


export type SignInQuery = { __typename?: 'RootQueryType', signIn?: string | null };
